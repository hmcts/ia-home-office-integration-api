buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath("org.yaml:snakeyaml:1.23")
    classpath("net.serenity-bdd:serenity-gradle-plugin:3.2.3")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.7.11'
  id 'uk.gov.hmcts.java' version '0.12.43'
  id 'org.owasp.dependencycheck' version '8.0.2'
  id 'com.github.ben-manes.versions' version '0.28.0'
  id 'org.sonarqube' version '2.8'
  id 'au.com.dius.pact' version '4.1.38'
  id "info.solidsoft.pitest" version '1.5.2'
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'project-report'

mainClassName = 'uk.gov.hmcts.reform.iahomeofficeintegrationapi.Application'
def jarName = 'ia-home-office-integration-api.jar'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contactTest/resources')
  }
}

processFunctionalTestResources {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

processIntegrationTestResources {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy aggregate
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task contract(type: Test, description: 'Runs the pact contract tests.', group: 'Verification') {
  description = "Runs the consumer Pact tests"
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.12.0'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.18.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
//  ruleSetFiles = files("config/pmd/ruleset.xml")
  ruleSets = [
      'category/java/errorprone.xml',
      'category/java/bestpractices.xml'
  ]
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.getOutputLocation().set(file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml"))
  }
}

sonarqube {
  properties {
    property "sonar.projectName", "IA :: Immigration & Asylum Home Office Integration API"
    property "sonar.projectKey", "IAHOMEOFFICEINTEGRATIONAPI"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/iahomeofficeintegrationapi/infrastructure/config/**," +
            "src/main/java/uk/gov/hmcts/reform/iahomeofficeintegrationapi/Application.java"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

pitest {
  junit5PluginVersion = '0.12'
  targetClasses = ['uk.gov.hmcts.reform.iahomeofficeintegrationapi.*']
  excludedClasses = [
          'uk.gov.hmcts.reform.iahomeofficeintegrationapi.infrastructure.config.*',
          'uk.gov.hmcts.reform.iahomeofficeintegrationapi.Application',
          'uk.gov.hmcts.reform.iahomeofficeintegrationapi.CcdScenarioRunnerTest'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  failWhenNoMutations = false
}

project.tasks['pitest'].group = "Verification"


dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '30.0-jre') {
      entry 'guava'
    }

    // CVE-2021-42340
    dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.58') {
          entry 'tomcat-embed-core'
          entry 'tomcat-embed-el'
          entry 'tomcat-embed-websocket'
    }

    // CVE-2021-22060
    dependency(group: 'org.springframework', name: 'spring-core', version: '5.3.15')

    //CVE-2021-22119
    dependency group: 'org.springframework.security', name: 'spring-security-core',  version: '5.6.1'

    //CVE-2021-42550
    dependencySet(group: 'ch.qos.logback', version: '1.2.10') {
      entry 'logback-classic'
      entry 'logback-core'
    }

    //CVE-2021-44228, CVE-2021-44832, CVE-2021-45046
    dependencySet(group: 'org.apache.logging.log4j', version: '2.17.1') {
      entry 'log4j-api'
      entry 'log4j-to-slf4j'
    }
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
}

def versions = [
  junit           : '5.6.2',
  junitPlatform   : '1.6.2',
  reformLogging   : '5.1.7',
  springBoot      : '2.6.3',
  springfoxSwagger: '2.9.2',
  pact_version    : '3.5.24',
  serenity        : '2.2.12'
]

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

configurations {
  integrationTestCompile.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
  functionalTestCompile.extendsFrom testImplementation
  functionalTestRuntime.extendsFrom testRuntime
  contractTestImplementation.extendsFrom testImplementation
  contractTestRuntime.extendsFrom testRuntime
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client', version: versions.springBoot
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server', version: versions.springBoot

  // CVE-2019-17195
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '7.9'

  // CVE-2021-27568
  implementation group: 'net.minidev', name: 'json-smart', version: '2.3.1'

  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.2'
  implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4'

  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '5.2.2'

  compileOnly 'org.projectlombok:lombok:1.18.28'
  annotationProcessor 'org.projectlombok:lombok:1.18.28'
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '3.3.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.1'
  implementation group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.4'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.2.2.RELEASE'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-dependencies', version: '2021.0.7'
  implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.3'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.2'

  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
  implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot, {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation "com.github.tomakehurst:wiremock:2.19.0"
  testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.5.0'
  testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.7'
  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
    exclude group: "com.vaadin.external.google", module: "android-json"
  }
  testImplementation "ru.lanwen.wiremock:wiremock-junit5:1.3.1"


  testImplementation group: 'org.springframework.security', name: 'spring-security-test'
  testImplementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '5.2.2'

  testCompileOnly 'org.projectlombok:lombok:1.18.28'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'

  testImplementation group: 'org.pitest', name: 'pitest', version: '1.5.2'

  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.26.3'
  testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8', version: '2.26.3'
  testImplementation group: 'ru.lanwen.wiremock', name: 'wiremock-junit5', version: '1.3.1'
  testImplementation group: 'org.springframework.security', name: 'spring-security-test'

  //PACT testing
  contractTestImplementation group: 'com.google.guava', name: 'guava', version: '30.0-jre'
  contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  contractTestImplementation("org.assertj:assertj-core:3.16.1")
  //pact contract testing
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: versions.pact_version
  contractTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath
}



project.ext {
  pacticipant = 'ia_homeOfficeIntegrationApi'
  pacticipantVersion = getCheckedOutGitCommitHash()
}

task runAndPublishConsumerPactTests(type: Test) {
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath

}

runAndPublishConsumerPactTests.finalizedBy pactPublish

pact {
  broker {
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
  }
  publish {
    pactDirectory = "target/pacts"
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pacticipantVersion
  }
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

bootJar {
  getArchiveFileName().set(provider {
    'ia-home-office-integration-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
