buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath("org.yaml:snakeyaml:1.23")
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.11")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.springframework.boot' version '2.2.5.RELEASE'
  id 'org.owasp.dependencycheck' version '5.3.1'
  id 'com.github.ben-manes.versions' version '0.28.0'
  id 'org.sonarqube' version '2.8'
  id 'au.com.dius.pact' version '3.5.24'
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.aggregator'
//apply plugin: 'project-report'
//apply plugin: 'idea'

def versions = [
  gradlePitest       : '1.3.0',
  pitest             : '1.4.2',
  reformLogging      : '5.1.1-BETA',
  reformHealthStarter: '0.0.5',
  serenity           : '2.0.11',
  sonarPitest        : '0.5',
  springBoot         : '2.2.4.RELEASE',
  springHystrix      : '2.1.1.RELEASE',
  springfoxSwagger   : '2.9.2',
  pact_version       : '3.5.24'

]

mainClassName = 'uk.gov.hmcts.reform.hois.Application'
def jarName = 'ia-home-office-integration-api.jar'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

allprojects {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
}

compileJava {
  options.compilerArgs << '-parameters' << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

compileTestJava {
  options.compilerArgs << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contactTest/resources')
  }
}

/*idea {
  module {
    testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
    testResourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testResourceDirs += project.sourceSets.functionalTest.resources.srcDirs
    testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
    testResourceDirs += project.sourceSets.smokeTest.resources.srcDirs
    testSourceDirs += project.sourceSets.contractTest.java.srcDirs
    testResourceDirs += project.sourceSets.contractTest.resources.srcDirs
  }
}*/

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
  functionalTestCompile.extendsFrom testCompile
  functionalTestRuntime.extendsFrom testRuntime
  contractTestCompile.extendsFrom testCompile
  contractTestRuntime.extendsFrom testRuntime
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task contract(type: Test, description: 'Runs the pact contract tests.', group: 'Verification') {
  description = "Runs the consumer Pact tests"
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath

}

project.ext {
  pactVersion = getCheckedOutGitCommitHash()
  //pactVersion = '3.5.24'
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
  toolVersion = "6.18.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
    'category/java/errorprone.xml',
    'category/java/bestpractices.xml'
  ]
  //ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacoco {
  toolVersion = "0.8.4"
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: ia-homeoffice-integration-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:ia-homeoffice-integration-api"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all {
      def isNonStable = { String version ->
        ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
          version ==~ /(?i).*[.-]\$qualifier[.\\d-+]*/
        }
      }
      if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
}

dependencyManagement {
  dependencies {
    dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.64'
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '28.2-jre') {
      entry 'guava'
    }
  }
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven {
    url "https://dl.bintray.com/hmcts/hmcts-maven"
  }
}

dependencies {

  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json'
 // compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: versions.springBoot
  compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.1.RELEASE'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: versions.springBoot
  compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: '0.0.5'

  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

  compile group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'logging-httpcomponents', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4'
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.2.RELEASE'

  //compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.0.0'
  //compile(group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.4')
  compile group: 'com.google.guava', name: 'guava', version: '27.0-jre'
  compile 'org.projectlombok:lombok:1.18.12'

  compile group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.5.6'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.2'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.2'
  compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.10.2'
  compile group: 'io.github.openfeign.form', name: 'feign-form', version: '3.4.0'
  compile group: 'io.github.openfeign.form', name: 'feign-form-spring', version: '3.4.0'
  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'

  testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.7'
  testCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  //pact contract testing
  contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: versions.pact_version
  contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: versions.pact_version

  contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
  contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")
  contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')

  contractTestCompile(group: 'org.yaml', name: 'snakeyaml', version: '1.23') {
    force = true
  }

  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath

  functionalTestCompile sourceSets.main.runtimeClasspath

  smokeTestCompile sourceSets.main.runtimeClasspath

  contractTestCompile sourceSets.main.runtimeClasspath
  contractTestCompile sourceSets.test.runtimeClasspath

}

pact {
  publish {
    pactDirectory = 'target/pacts'
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pactVersion ?: pact_version
  }
}

test {
  useJUnitPlatform()
  failFast = true
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

gradle.startParameter.continueOnFailure = true

bootJar {
  archiveName = 'ia-home-office-integration-api.jar'

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}
