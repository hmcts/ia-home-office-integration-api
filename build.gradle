buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
  }
  dependencies {
    classpath("org.yaml:snakeyaml:2.4")
    classpath("net.serenity-bdd:serenity-gradle-plugin:3.6.22")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '2.7.18'
  id 'uk.gov.hmcts.java' version '0.12.66'
  id 'org.owasp.dependencycheck' version '10.0.4'
  id 'com.github.ben-manes.versions' version '0.50.0'
  id 'org.sonarqube' version '4.4.1.3373'
  id 'au.com.dius.pact' version '4.6.17'
  id 'info.solidsoft.pitest' version '1.15.0'
  id 'io.freefair.lombok' version '6.6.3'
  id 'com.adarshr.test-logger' version '3.2.0'
}

apply plugin: 'java'
apply plugin: "net.serenity-bdd.serenity-gradle-plugin"
apply plugin: 'project-report'

def versions = [
        junit              : '5.13.2',
        junitPlatform      : '1.13.2',
        gradlePitest       : '1.15.0',
        pact_version       : '4.6.17',
        pitest             : '1.20.0',
        reformLogging      : '6.0.1',
        reformHealthStarter: '0.0.5',
        restAssured        : '5.5.5',
        serenity           : '3.6.22',
        sonarPitest        : '0.5',
        springHystrix      : '2.2.10.RELEASE',
        springDoc          : '1.8.0',
        springCloud        : '3.1.6'
]

mainClassName = 'uk.gov.hmcts.reform.iahomeofficeintegrationapi.Application'
def jarName = 'ia-home-office-integration-api.jar'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contactTest/resources')
  }
}

processFunctionalTestResources {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

processIntegrationTestResources {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy aggregate
  testLogging {
    showStackTraces = true
  }
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task contract(type: Test, description: 'Runs the pact contract tests.', group: 'Verification') {
  description = "Runs the consumer Pact tests"
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

task fortifyScan(type: JavaExec, description: 'Run fortify scan.')  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.26.0'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
//  ruleSetFiles = files("config/pmd/ruleset.xml")
  ruleSets = [
          'category/java/errorprone.xml',
          'category/java/bestpractices.xml'
  ]
}

jacoco {
  toolVersion = "0.8.13"
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required.set(true)
    csv.required.set(false)
    xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
  }
}

sonarqube {
  properties {
    property "sonar.projectName", "IA :: Immigration & Asylum Home Office Integration API"
    property "sonar.projectKey", "IAHOMEOFFICEINTEGRATIONAPI"
    property "sonar.coverage.jacoco.xmlReportPaths", layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get().asFile
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/iahomeofficeintegrationapi/infrastructure/config/**," +
            "src/main/java/uk/gov/hmcts/reform/iahomeofficeintegrationapi/Application.java"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

pitest {
  junit5PluginVersion = '1.1.2'
  targetClasses = ['uk.gov.hmcts.reform.iahomeofficeintegrationapi.*']
  excludedClasses = [
          'uk.gov.hmcts.reform.iahomeofficeintegrationapi.infrastructure.config.*',
          'uk.gov.hmcts.reform.iahomeofficeintegrationapi.Application',
          'uk.gov.hmcts.reform.iahomeofficeintegrationapi.CcdScenarioRunnerTest'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  failWhenNoMutations = false
  verbose = true
  mutationThreshold = 70
}

project.tasks['pitest'].group = "Verification"


dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

dependencyManagement {
  dependencies {

    dependency group: 'commons-fileupload', name: 'commons-fileupload', version: '1.6.0'
    dependency group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'
    dependency group: 'org.yaml', name: 'snakeyaml', version: '2.4'

    dependencySet(group: 'com.fasterxml.jackson.core', version: '2.19.1') {
      entry 'jackson-databind'
      entry 'jackson-core'
      entry 'jackson-annotations'
    }

    dependencySet(group: 'com.fasterxml.jackson.dataformat', version: '2.19.1') {
      entry 'jackson-dataformat-yaml'
      entry 'jackson-dataformat-cbor'
    }

    dependencySet(group: 'com.fasterxml.jackson.datatype', version: '2.19.1') {
      entry 'jackson-datatype-jsr310'
      entry 'jackson-datatype-jdk8'
    }

    dependencySet(group: 'com.fasterxml.jackson.module', version: '2.19.1') {
      entry 'jackson-module-parameter-names'
      entry 'jackson-module-afterburner'
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
  maven { url 'https://www.jitpack.io' }
}

ext.libraries = [
        junit5: [
                "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
                "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
                "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
                "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
        ]
]

configurations {
  integrationTestCompile.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
  functionalTestCompile.extendsFrom testImplementation
  functionalTestRuntime.extendsFrom testRuntime
  contractTestImplementation.extendsFrom testImplementation
  contractTestRuntime.extendsFrom testRuntime
}

dependencies {
  modules {
    module("org.codehaus.groovy:groovy") {
      replacedBy("org.apache.groovy:groovy", "conflicts in current rest-assured version")
    }
    module("org.codehaus.groovy:groovy-xml") {
      replacedBy("org.apache.groovy:groovy-xml", "conflicts in current rest-assured version")
    }
    module("org.codehaus.groovy:groovy-json") {
      replacedBy("org.apache.groovy:groovy-json", "conflicts in current rest-assured version")
    }
  }
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-dependencies', version: 'Hoxton.SR4'

  implementation(group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.1.2') {
    exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
  }
  implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.9') {
    exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
  }
  implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap' , version: '3.1.9') {
    exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
  }
  implementation(group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.10.RELEASE') {
    exclude group: "org.bouncycastle", module: "bcprov-jdk15on"
  }
  implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.81'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: '6.1.9'

  implementation group: 'com.github.hmcts', name: 'auth-checker-lib', version: '2.3.0'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: versions.springDoc

  implementation group: 'org.apiguardian', name:'apiguardian-api', version: '1.1.2'

  // CVE-2019-17195
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.48'

  // CVE-2021-27568
  implementation group: 'net.minidev', name: 'json-smart', version: '2.5.2'

  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.19.1'
  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
  implementation group: 'commons-io', name: 'commons-io', version: '2.19.0'

  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.18'
  implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.5.18'
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.1'

  implementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.17.6'
  implementation group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.9'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '6.3.0'

  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine'

  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.106'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.106'

  compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.38'
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.38'
  testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.38'
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.38'

  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.7.18') {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }

  testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.35.1'
  testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.12.4'
  testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
    exclude group: "com.vaadin.external.google", module: "android-json"
  }
  testImplementation(group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '3.1.10') {
    exclude group: "com.github.tomakehurst", module: "wiremock-standalone"
  }
  testImplementation group: 'org.springframework.security', name: 'spring-security-test'

  testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
  testImplementation "info.solidsoft.gradle.pitest:gradle-pitest-plugin:${versions.gradlePitest}"
  testImplementation "org.codehaus.sonar-plugins:sonar-pitest-plugin:${versions.sonarPitest}"

  testImplementation group: 'net.bytebuddy', name: 'byte-buddy-agent', version: '1.17.6'
  testImplementation group: 'com.vladsch.flexmark', name: 'flexmark-all', version: '0.64.8'

  testImplementation group: 'io.rest-assured', name: 'rest-assured-all', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
  testImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured

  testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.8', classifier: 'all', {
    exclude group: 'commons-io', module: 'commons-io'
    exclude group: 'org.apache.commons', module: 'commons-lang3'
  }

  //PACT testing
  contractTestImplementation group: 'com.google.guava', name: 'guava', version: '32.1.3-jre'
  contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  contractTestImplementation group: 'org.assertj', name: 'assertj-core', version: '3.27.3'
  //pact contract testing
  contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-model', version: '3.6.15'
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
  contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version
  contractTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath
}

project.ext {
  pacticipant = 'ia_homeOfficeIntegrationApi'
  pacticipantVersion = getCheckedOutGitCommitHash()
}

task runAndPublishConsumerPactTests(type: Test, description: 'Publish pact test to broker.', group: 'Verification') {
  onlyIf {
    return System.env.SKIP_CONTRACT_TESTS == null || System.env.SKIP_CONTRACT_TESTS == 'false'
  }
  useJUnitPlatform()
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  systemProperty 'pact.rootDir', "pacts"
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

pact {
  broker {
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
  }
  publish {
    pactDirectory = 'pacts'
    tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
    version = project.pacticipantVersion
  }
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

bootJar {
  getArchiveFileName().set(provider {
    'ia-home-office-integration-api.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}


testlogger {
  theme 'standard'
  showExceptions true
  showStackTraces true
  showFullStackTraces false
  showCauses true
  slowThreshold 5000
  showSummary true
  showSimpleNames false
  showPassed true
  showSkipped true
  showFailed true
  showStandardStreams false
  showPassedStandardStreams true
  showSkippedStandardStreams true
  showFailedStandardStreams true
}

