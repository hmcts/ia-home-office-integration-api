#!groovy

properties([
    // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
    pipelineTriggers([cron('H 8 * * 1-5')]),
    parameters([
        string(name: 'URL_TO_TEST', defaultValue: 'http://ia-home-office-integration-api-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
        string(name: 'SecurityRules',
            defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
            description: 'The URL you want to run these tests against'),
    ])
])

@Library("Infrastructure")
import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "ia"
def component = "home-office-integration-api"

def secrets = [
    'ia-${env}': [

        secret('test-caseofficer-username', 'TEST_CASEOFFICER_USERNAME'),
        secret('test-caseofficer-password', 'TEST_CASEOFFICER_PASSWORD'),
        secret('test-law-firm-a-username', 'TEST_LAW_FIRM_A_USERNAME'),
        secret('test-law-firm-a-password', 'TEST_LAW_FIRM_A_PASSWORD'),
        secret('test-judge-x-username', 'TEST_JUDGE_X_USERNAME'),
        secret('test-judge-x-password', 'TEST_JUDGE_X_PASSWORD'),
        secret('test-homeoffice-pou-username', 'TEST_HOMEOFFICE_POU_USERNAME'),
        secret('test-homeoffice-pou-password', 'TEST_HOMEOFFICE_POU_PASSWORD'),
        secret('test-homeoffice-generic-username', 'TEST_HOMEOFFICE_GENERIC_USERNAME'),
        secret('test-homeoffice-generic-password', 'TEST_HOMEOFFICE_GENERIC_PASSWORD'),
        secret('test-adminofficer-username', 'TEST_ADMINOFFICER_USERNAME'),
        secret('test-adminofficer-password', 'TEST_ADMINOFFICER_PASSWORD'),

        secret('idam-url', 'IDAM_URL'),
        secret('s2s-url', 'S2S_URL'),
        secret('launch-darkly-sdk-key', 'LAUNCH_DARKLY_SDK_KEY'),

        secret('app-insights-connection-string', 'app-insights-connection-string'),
        secret('homeoffice-client-id', 'IA_HOMEOFFICE_CLIENT_ID'),
        secret('homeoffice-secret', 'IA_HOMEOFFICE_SECRET'),
        secret('idam-client-id', 'IA_IDAM_CLIENT_ID'),
        secret('idam-secret', 'IA_IDAM_SECRET'),
        secret('s2s-secret', 'IA_S2S_SECRET'),
        secret('s2s-microservice', 'IA_S2S_MICROSERVICE')

    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

GradleBuilder builder = new GradleBuilder(this, product)

withNightlyPipeline(type, product, component) {
    env.TEST_URL = params.URL_TO_TEST
    env.Rules = params.SecurityRules

    env.IA_IDAM_REDIRECT_URI = "https://ia-case-api-aat.service.core-compute-aat.internal/oauth2/callback"
    env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
    env.OPEN_ID_IDAM_URL = "https://idam-web-public.aat.platform.hmcts.net"
    env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.HOME_OFFICE_ENDPOINT = "http://ia-home-office-mock-api-aat.service.core-compute-aat.internal"

    enableAksStagingDeployment()
    disableLegacyDeployment()
    loadVaultSecrets(secrets)

//    enableFortifyScan()
    enableSecurityScan()
    enableMutationTest()
    enableSlackNotifications('#ia-tech')
    enableFullFunctionalTest()

    after('fortify-scan') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

    before('fullFunctionalTest') {
        try {
            builder.gradle('test')
            builder.gradle('integration')
            builder.gradle('smoke')
        } finally {
            junit '**/test-results/**/*.xml'
        }
    }

    afterAlways('mutationTest') {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/pitest",
                reportFiles          : 'index.html',
                reportName           : 'IAC Timed Event Service Mutation Test Report'
        ])
    }

    afterAlways('fullFunctionalTest') {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/functional",
                reportFiles          : 'index.html',
                reportName           : 'IAC Home Office Integration Functional Test Report'
        ])
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/test",
                reportFiles          : "index.html",
                reportName           : "IAC Home Office Integration Unit Test Report"
        ]
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/smoke",
                reportFiles          : "index.html",
                reportName           : "IAC Home Office Integration Smoke Test Report"
        ]
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/integration",
                reportFiles          : "index.html",
                reportName           : "IAC Home Office Integration Integration Test Report"
        ]

        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/build/reports/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/**/*'
    }
}
